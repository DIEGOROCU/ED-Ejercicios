// Diego Rodriguez Cubero DG30 FAL

#include <iostream>
#include <fstream>
#include <iomanip>
#include <vector>
#include <algorithm>
#include <string>
#include <cmath>
#include <cctype>

using namespace std;

class Fecha {
public:
    Fecha() : dia(0), mes(0), anyo(0) {}
    Fecha(int d, int m, int a) : dia(d), mes(m), anyo(a) {}
    int getDia() const { return dia; }
    int getMes() const { return mes; }
    int getAnyo() const { return anyo; }
    bool operator<(const Fecha& f) const {
        if (anyo < f.anyo) return true;
        if (anyo > f.anyo) return false;
        if (mes < f.mes) return true;
        if (mes > f.mes) return false;
        return dia < f.dia;
    }
    bool operator==(const Fecha& f) const {
        return dia == f.dia && mes == f.mes && anyo == f.anyo;
    }
    bool operator<=(const Fecha& f) const {
        return *this < f || *this == f;
    }

    void print(ostream& salida) const {
        salida << setfill('0') << setw(2) << dia << ':' << setfill('0') << setw(2) << mes << ':' << setfill('0') << setw(4) << anyo;
    }
private:
    int dia, mes, anyo;
};

ostream& operator<<(ostream& salida, const Fecha& f) {
    f.print(salida);
    return salida;
}

int busquedaBinaria(const vector<Fecha>& v, const Fecha& f, int ini, int fin) {
    if (ini >= fin) return ini;
    int m = (ini + fin) / 2;
    if (v[m] < f) return busquedaBinaria(v, f, m + 1, fin);
    else return busquedaBinaria(v, f, ini, m);
}

void realizarConsulta(const vector<Fecha>& v){
    int dia, mes, anyo;
    char aux;
    cin >> dia >> aux >> mes >> aux >> anyo;
    Fecha f(dia, mes, anyo);
    int indi = busquedaBinaria(v, f, 0, v.size());
    if (indi == v.size()) cout << "NO" << endl;
    else {
        cout << v[indi + 1] << endl;
    }

}

bool resuelveCaso() {
    
    int numTrenes, consultas;
    vector <Fecha> trenes;
    
    if (numTrenes == 0 && consultas == 0) {
        return false;
    }
    
    else{
        for (int i = 0; i < numTrenes; i++) {
            int dia, mes, anyo;
            char aux;
            cin >> dia >> aux >> mes >> aux >> anyo;
            Fecha f(dia, mes, anyo);
            trenes.push_back(f);
        }
        for (int i = 0; i < consultas; i++) {
            realizarConsulta(trenes);
        }
        cout << "---" << endl;

        return true;
    }
}

int main() {
    
    // ajuste para que cin extraiga directamente de un fichero
#ifndef DOMJUDGE
    std::ifstream in("casos.txt");
    auto cinbuf = std::cin.rdbuf(in.rdbuf());
#endif

    while (resuelveCaso());
    
    // restablecimiento de cin
#ifndef DOMJUDGE
    std::cin.rdbuf(cinbuf);
    system("pause");
#endif
    return 0;
}